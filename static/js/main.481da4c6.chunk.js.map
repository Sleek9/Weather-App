{"version":3,"sources":["components/SearchBar.jsx","components/WeatherDetails.jsx","components/ErrorMessage.jsx","components/Loader.jsx","utils/getCurrentLocation.js","hooks/useFetchWeather.jsx","components/WeatherApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","handleSearch","location","useState","search","setSearch","onSubmit","e","preventDefault","className","type","name","id","placeholder","defaultValue","onChange","target","value","autoComplete","WeatherDetails","response","data","weather","sys","country","src","icon","alt","description","main","temp","feels_like","ErrorMessage","error","cod","message","Loader","a","axios","get","res","city","useFetchWeather","setLocation","setResponse","setError","isLoading","setIsLoading","history","useHistory","getData","useCallback","replace","useEffect","getCurrentLocation","then","WeatherApp","useLocation","qSearch","URLSearchParams","Helmet","searchValue","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.481da4c6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Styles\r\nimport \"./SearchBar.css\";\r\n\r\nconst SearchBar = ({ handleSearch, location }) => {\r\n  const [search, setSearch] = useState(null);\r\n\r\n  const handleChange = (e) => setSearch(e.target.value);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!search) handleSearch(null);\r\n    handleSearch(search);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"input\"\r\n          name=\"ciudad\"\r\n          id=\"ciudad\"\r\n          placeholder=\"Ingresa tu ciudad o país\"\r\n          defaultValue={location}\r\n          onChange={handleChange}\r\n          autoComplete=\"off\"\r\n        ></input>\r\n        <button type=\"submit\" className=\"button\">\r\n          <i className=\"fas fa-search\"></i>\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./WeatherDetails.css\";\r\n\r\nconst WeatherDetails = ({ response }) => {\r\n  if (!response) return null;\r\n\r\n  let data = response.weather[0];\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <p className=\"city\">\r\n        Clima de {response.name}, {response.sys.country}\r\n      </p>\r\n      <div className=\"imagen\">\r\n        <img\r\n          src={`http://openweathermap.org/img/wn/${data.icon}@4x.png`}\r\n          alt=\"\"\r\n        />\r\n        <p className=\"description\">{data.description}</p>\r\n      </div>\r\n      <div className=\"temp\">\r\n        <p className=\"tempC\">{response.main.temp}°C</p>\r\n        <p className=\"tempFeels\">Se siente como {response.main.feels_like}°C</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDetails;\r\n","import React from \"react\";\r\nimport \"./ErrorMessage.css\";\r\n\r\nconst ErrorMessage = ({ error }) => {\r\n  return (\r\n    <div className=\"error\">\r\n      <p>\r\n        Error {error.data.cod}: {error.data.message}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React from \"react\";\r\nimport \"./Loader.css\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader\">\r\n      <div className=\"lds-roller\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import axios from \"axios\";\r\n\r\nexport default async function getCurrentLocation() {\r\n  try {\r\n    const res = await axios.get(\"http://ip-api.com/json\");\r\n    return res.data.city;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport getCurrentLocation from \"../utils/getCurrentLocation\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function useFetchWeather() {\r\n  const [location, setLocation] = useState(null);\r\n  const [response, setResponse] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const getData = useCallback(async () => {\r\n    setError(null);\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await axios.get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${location}&lang=es&units=metric&appid=32af7cce19ca153549abe935840d6753`\r\n      );\r\n      history.replace({ search: `?q=${location}` });\r\n      setResponse(res.data);\r\n    } catch (e) {\r\n      setError(e.response);\r\n      setResponse(null);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [location, history]);\r\n\r\n  useEffect(() => {\r\n    // if no query get current location\r\n    if (!history.location.search)\r\n      getCurrentLocation().then((location) => setLocation(location));\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!location) return;\r\n\r\n    getData();\r\n  }, [location, getData]);\r\n\r\n  return { response, error, isLoading, setLocation, location };\r\n}\r\n","// React\r\nimport React, { useEffect } from \"react\";\r\n\r\n// React-Router\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\n// Components\r\nimport SearchBar from \"./SearchBar\";\r\nimport WeatherDetails from \"./WeatherDetails\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport Loader from \"./Loader\";\r\n\r\n// Custom Hook\r\nimport useFetchWeather from \"../hooks/useFetchWeather\";\r\n\r\n// Styles\r\nimport \"../App.css\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst WeatherApp = () => {\r\n  const { setLocation, location, isLoading, error, response } =\r\n    useFetchWeather();\r\n\r\n  const history = useHistory();\r\n  const { search } = useLocation();\r\n  const query = new URLSearchParams(search);\r\n  const qSearch = query.get(\"q\");\r\n\r\n  const handleSearch = (searchValue) => {\r\n    if (!searchValue) return;\r\n\r\n    setLocation(searchValue);\r\n\r\n    if (history.location.search !== `?q=${searchValue}`) {\r\n      history.replace({ search: `?q=${searchValue}` });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // get data from query\r\n    if (qSearch) setLocation(qSearch);\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Helmet>\r\n        <title>Weather App | {location ? location : \"\"}</title>\r\n      </Helmet>\r\n      <div className=\"header\">\r\n        <h2>Clima Hoy</h2>\r\n        <i className=\"fas logo\">&#xf6c4;</i>\r\n      </div>\r\n      <SearchBar handleSearch={handleSearch} location={location} />\r\n      {isLoading && <Loader />}\r\n      {error && <ErrorMessage error={error} />}\r\n      {response && <WeatherDetails response={response} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;\r\n","import { HashRouter, Route } from \"react-router-dom\";\r\nimport WeatherApp from \"./components/WeatherApp\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <HashRouter>\r\n        <Route exact path=\"/\" component={WeatherApp} />\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}